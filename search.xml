<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[菜鸟训练营第一期]]></title>
    <url>%2F2018%2F01%2F19%2F2018-01-19%2F</url>
    <content type="text"><![CDATA[菜鸟训练营第一期 我刚刚学习 Python 的时候就加入了一个小密圈，现在应该说是星球了。当时感觉水平次的很，当然现在也是只能谢谢寻常的逻辑代码。别说高级应用，甚至几个高级函数也不会用几个。不过自觉应该可以去做一下之前星球里的题目了。 因为自己写的代码比较无趣就贴上星主的代码。 第七题原题：有一串长的字符串 names=”LI XIA ,ZHAO MING ,LAO WANG *,DA XIONG &gt;,LI MEI MEI,CHANG JIANG,LI QIANG,ZHANG WU JI,ZHANG SAN FENG,DU GU QIU BAI,QIAO FENG” 要求： 过滤出所以的名字，去掉每个名字的左右的空格和乱码，每个名字的首字母大小比如’LAO WANG *’，处理成’Lao Wang’ 统计出所有名字里面名字最长 统计出同姓的人的名单 解题：12345678910names = &apos;LI XIA ,ZHAO MING ,LAO WANG *,DA XIONG &gt;,LI MEI MEI,&apos;\ &apos;CHANG JIANG,LI QIANG,ZHANG WU JI,ZHANG SAN FENG,&apos;\ &apos;DU GU QIU BAI,QIAO FENG&apos;def problem7(names): names_dict = &#123;name.title().strip(&apos; &gt;*&apos;):len(name) for name in names.split(&apos;,&apos;)&#125; print(sorted(names_dict.items(),key=lambda x:x[1],reverse=True))problem7(names) 解析两句代码解题，sorted 排序key 指定为名字长度，逆序排序增加属性 reverse=True 另外增加sorted 和 sort 的区别 函数 用法 效果 sorted sorted(a) 返回排序后的对象，不改变原对象顺序 sort a.sort() 改变原对象的排列顺序 第八题原题:数字1到5可以被写成:one,two,three,four,five,因此这些字母的总长度为:3+3+5+4+4=19,现在求序列1到1000(包括1000),这些数字写成单词，总长度为多少？ 注意: 比如 342(three hundred and forty-two)为23字母,空格和-不计算 比如 115(one hundred and fifteen)为20个字母 比如 1000(one hundred)为11个字母 解题:12345678910111213141516171819202122232425262728293031323334353637383940414243444546mapping=&#123;1:&apos;one&apos;,2:&apos;two&apos;,3:&apos;three&apos;,4:&apos;four&apos;,5:&apos;five&apos;, 6:&apos;six&apos;,7:&apos;seven&apos;,8:&apos;eight&apos;,9:&apos;nine&apos;,10:&apos;ten&apos;, 11:&apos;eleven&apos;,12:&apos;twelve&apos;,13:&apos;thirteen&apos;,14:&apos;fourteen&apos;,15:&apos;fifteen&apos;, 16:&apos;sixteen&apos;,17:&apos;seventeen&apos;,18:&apos;eighteen&apos;,19:&apos;nineteen&apos;,20:&apos;twenty&apos;, 30:&apos;thirty&apos;,40:&apos;forty&apos;,50:&apos;fifty&apos;,60:&apos;sixty&apos;,70:&apos;seventy&apos;, 80:&apos;eighty&apos;,90:&apos;ninety&apos;,100:&apos;hundred&apos;,1000:&apos;thousand&apos;&#125;def less_than_twenty(n): if n &lt;= 20 and n &gt;0: return mapping[n]def less_than_hundred(n): if n &gt; 20 and n &lt; 100: a,b = int(n/10),n%10 return mapping[a*10] if b == 0 else mapping[a*10]+mapping[b]def less_than_thousand(n): words=[] if n &gt;= 100 and n &lt;1000: a,b = int(n/100),n%100 words.append(mapping[a]) words.append(mapping[100]) if b&gt;0 and b&lt;=20: words.append(&apos;and&apos;) words.append(less_than_twenty(b)) if b&gt;20: words.append(&apos;and&apos;) words.append(less_than_hundred(b)) return &apos;&apos;.join(words)def get_words(n): if n&gt;0 and n&lt;=20: return less_than_twenty(n) elif n&lt;100: return less_than_hundred(n) elif n&gt;=100 and n&lt;1000: return less_than_thousand(n) elif n == 1000: return &apos;onethousand&apos;res = map(get_words,[x for x in range(1,1001)])print(sum(map(len,res))) 解析:此题中主要用到的点有 elif、join()、map函数以及用到了上一篇文章中 简介的 if/else 用法。 原理很简单，代码也很简单。先通过创建可哈希的字典对象，方便后面直接通过数字映射单词。然后通过判断区间，进行分别单词的获取。 map 函数是一个高级函数，接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。 与之相似的还有 reduce 函数。把一个函数作用在一个序列上，函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算， 我之前在学 python 的时候，和 reduce 一起学的，有笔记，但是抄笔记是一件麻烦又无趣的事，如果后面又学到相关的高级应用，再贴代码吧。]]></content>
      <categories>
        <category>python</category>
        <category>exercise</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>菜鸟训练营</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[优秀代码一]]></title>
    <url>%2F2018%2F01%2F18%2F%E4%BC%98%E7%A7%80%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B51%2F</url>
    <content type="text"><![CDATA[正所谓，人生苦短，我用 python 。在python 中，有非常多的令人影响深刻的好东西。 1.简洁的表达式，比如if/else放在一行里面‘’def test(m):‘’ return ‘a’ if m==1 else ‘b’2.构成一个字典序列‘’print(dict(zip(‘abcd’,range(4))) )‘’&gt;&gt;{‘a’: 0, ‘c’: 2, ‘b’: 1, ‘d’: 3}3.if else print 一行搞定‘’print(‘ok’ if a==1 else ‘ko’)4.一行代码，巧妙的求解‘’#列出1到20的数字，若是3的倍数就用apple代替，若是5的倍数就用orange代替，‘’#若既是3的倍数又是5的倍数就用appleorange代替‘’print [‘apple’[i%35::]+’orange’[i%56::] or i for i in range(1,21)]关键字or在上下文对算中，若有真假值，返回真值，若同为假值，返回最后一个假值‘’#&gt;&gt;&gt; print(‘’ or 1)‘’ 1‘’ &gt;&gt;&gt; print(‘’+”” or 1)‘’ 15.推导列表生成字典‘’list1=((1,’a’),(2,’b’))‘’print({x[0]:x[1] for x in list1 })‘’print({x:y for x in range(4) for y in range(10,14)})6.非常漂亮的取列表,字典里面的排序‘’import heapq‘’ nums=[10,2,9,100,80]‘’ print heapq.nlargest(3,nums)‘’ print heapq.nsmallest(3,nums)‘’‘’ students=[{‘names’:’CC’,’score’:100,’height’:189},‘’ {‘names’:’BB’,’score’:10,’height’:169},‘’ {‘names’:’AA’,’score’:80,’height’:179}]‘’‘’ print heapq.nsmallest(2,students,key=lambda x:x[‘height’])]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>code part</tag>
        <tag>if/else</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post` bash$ hexo new “My New Post”` More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Testing</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
</search>
